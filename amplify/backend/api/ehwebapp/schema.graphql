type Orders @model @auth(rules: [
  { allow: public, provider: iam, operations: [create]}, 
  { allow: groups, groups: ["employee"], provider: userPools, operations: [create, update, read]},
  { allow: groups, groups: ["admin"], provider: userPools}]) {
  id: ID!
  createdAt: String!
  orderNum: String!

  name: String!
  phone: String!
  email: AWSEmail

  dateNeeded: AWSDate!
  timeNeeded: AWSTime
  location: String!

  status: OrderStatus!
  rushStatus: RushStatus!

  cart: [CartItem]!
  notes: String
}
type ContactInfo {
  name: String
  phone: AWSPhone
  faxPhone: String
  email: AWSEmail

  address: String
  city: String
  state: String
  zip: String
}
enum OrderStatus {
  NEW
  MOCKUP_SENT
  STANDBY
  COMPLETE
}
enum RushStatus {
  NONE
  ONE_DAY
  TWO_TO_THREE_DAYS
}

#Table for storing the locations and available fonts
type OrderChoice @model @auth(rules: [
  { allow: groups, groups: ["admin"], provider: userPools},
  { allow: groups, groups: ["employee"], provider: userPools, operations: [read]},
  { allow: public, provider: iam, operations: [read]}]) {
  type: ChoiceType!
  name: String!
}
enum ChoiceType {
  LOCATION
  FONT
}

type Graphic @model @auth(rules: [
  { allow: groups, groups: ["admin"], provider: userPools},
  { allow: groups, groups: ["employee"], provider: userPools, operations: [read]},
  { allow: public, provider: iam, operations: [read]}]) {
  name: String! @primaryKey
  imageName: String! #The name in the AWS S3 bucket
}

type CartAddonGraphic {
  name: String!
  code: String!
  price: Float!
  quantity: Int!
  category: ItemCategory!

  willEmail: Boolean!
  graphicName: String #Pk from graphics table
  customGraphicUrl: String #Any custom graphic url
}
type CartAddonService {
  name: String!
  code: String!
  price: Float!
  quantity: Int!
  category: ItemCategory!
}
type CartItem {
  name: String!
  code: String!
  price: Float!
  quantity: Int!
  category: ItemCategory!
  services: [CartAddonService!]
  graphics: [CartAddonGraphic!]
  cutouts: [CartAddonGraphic!]
  subItems: [CartItem!]

  txtObj: String
  layoutImg: String
  notes: String

  #Postponed information flags
  postTxt: Boolean!
  postLayout: Boolean!
}

type PurchaseOrder @model @auth(rules: [
{ allow: groups, groups: ["admin"], provider: userPools}]) {
  id: ID!
  vendorId: String!
  date: AWSDate!

  orderedProducts: [POItem!]
  isOpen: Boolean!
}
type POItem {
  itemCode: String!
  itemName: String!

  numPurchased: Int!
  unitCost: Float!
  totalCost: Float!

  numReceived: Int!
  receivedDate: AWSDate
  goodTill: AWSDate
  adjustments: [POItemAdjustment!]
}
type POItemAdjustment {
    adjAmt: Int!
    reason: String
    adjDate: AWSDate!
}
type OwnerContact @model @auth(rules: [
{ allow: groups, groups: ["admin"], provider: userPools}]) {
  contactInfo: ContactInfo!
}
type Vendor @model @auth(rules: [
{ allow: groups, groups: ["admin"], provider: userPools}]) {
  id: ID!
  vendorName: String!
  contactInfo: ContactInfo!

  shTerms: String
  salesTaxTerms: String
  notes: String
}
type Items @model @auth(rules: [
  { allow: groups, groups: ["admin"], provider: userPools},
  { allow: groups, groups: ["employee"], provider: userPools, operations: [read, update]},
  { allow: public, provider: iam, operations: [read, update]}]) {

  code: String! @primaryKey
  name: String!
  category: ItemCategory!

  price: Float!
  cost: Float!
  
  qty: Int
  numOrdered: Int
  qtyThresh: Int
  maxAddon: Int

  modifierGroups: [String!]
}
enum ItemCategory {
  PLAQUE
  DRINKWARE
  GIFT
  GRAPHIC
  SERVICE
}

type ModifierGroups @model @auth(rules: [
  { allow: groups, groups: ["admin"], provider: userPools}, 
  { allow: groups, groups: ["employee"], provider: userPools, operations: [read]},
  { allow: public, provider: iam, operations: [read]}]) {
  id: ID!
  name: String!
  modifiers: [String!]!
  items: [String!]
}
type Modifier @model @auth(rules: [
  { allow: groups, groups: ["admin"], provider: userPools}, 
  { allow: groups, groups: ["employee"], provider: userPools, operations: [read]},
  { allow: public, provider: iam, operations: [read]}]) {
  id: ID!
  name: String!
  price: Float!
}